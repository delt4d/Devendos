@page "/contacts"
@inject IContactsService ContactsService

<MudText Typo="Typo.h3">Contatos</MudText>
<br/>

<MudPaper>
    <MudList T="string">
        @foreach (var item in _items)
        {
            <MudListItem>
                <ContactItem ContactInfo="item.Contact" />
                @if (!IsLast(item))
                {
                    <MudDivider />   
                }
            </MudListItem>
        }
    </MudList>
</MudPaper>

@code {
    private readonly List<Item> _items = [];
    private int ItemsCount => _items.Count;

    protected override async Task OnInitializedAsync()
    {
        _items.Clear();
        
        await foreach (var item in GetItemsAsync())
        {
            _items.Add(item);
            StateHasChanged();
        }
    }

    private async IAsyncEnumerable<Item> GetItemsAsync()
    {
        await foreach (var contact in ContactsService.GetContactsAsync())
        {
            var item = new Item(ItemsCount, contact);
            yield return item;
        }
    }

    private bool IsLast(Item item) => item.Index + 1 == ItemsCount;

    private record Item(int Index, ContactInfo Contact);
}